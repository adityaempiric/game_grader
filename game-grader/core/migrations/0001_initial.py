# Generated by Django 4.1.5 on 2023-02-11 13:19

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('phone', models.CharField(blank=True, max_length=12, null=True)),
                ('role', models.CharField(blank=True, choices=[('Admin', 'Admin'), ('Staff', 'Staff'), ('Athlete', 'Athlete')], max_length=10, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('graduation', models.IntegerField(blank=True, null=True)),
                ('seasonofaccess', models.CharField(blank=True, max_length=500, null=True)),
                ('biography', models.CharField(blank=True, max_length=500, null=True)),
                ('positions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('QB', 'QB'), ('RB', 'RB'), ('SB', 'SB'), ('FB', 'FB'), ('WR', 'WR'), ('TE', 'TE'), ('OL', 'OL'), ('DL', 'DL'), ('LB', 'LB'), ('NIC', 'NIC'), ('SAF', 'SAF'), ('CB', 'CB'), ('K', 'K'), ('P', 'P'), ('LS', 'LS')], max_length=200, null=True), blank=True, null=True, size=None)),
                ('tags', models.CharField(blank=True, max_length=500, null=True)),
                ('coverpic', models.ImageField(blank=True, null=True, upload_to='cover_pic')),
                ('transcript', models.FileField(blank=True, null=True, upload_to='transcript_pic')),
                ('document', models.FileField(blank=True, null=True, upload_to='document_pic')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plantitle', models.CharField(max_length=100)),
                ('foldertype', models.CharField(choices=[('Game Folder', 'Game Folder'), ('Training Phase', 'Training Phase'), ('Other', 'Other')], max_length=20)),
                ('eventdate', models.DateField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periodname', models.CharField(max_length=100)),
                ('duration', models.IntegerField()),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeamDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_code', models.CharField(max_length=50)),
                ('team_name', models.CharField(max_length=50)),
                ('team_description', models.CharField(blank=True, max_length=500, null=True)),
                ('sport', models.CharField(blank=True, max_length=50, null=True)),
                ('team_coverpic', models.ImageField(blank=True, null=True, upload_to='team_cover_pic')),
                ('team_iconpic', models.ImageField(blank=True, null=True, upload_to='team_icon_pic')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_member', to=settings.AUTH_USER_MODEL)),
                ('teamname', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teamdetail')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NewPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planname', models.CharField(max_length=100)),
                ('plantype', models.CharField(choices=[('Practice Plan', 'Practice Plan'), ('Meeting Plan', 'Meeting Plan'), ('Workout Plan', 'Workout Plan')], max_length=20)),
                ('scheduledate', models.DateField()),
                ('scheduletime', models.TimeField()),
                ('notification', models.BooleanField(blank=True, null=True)),
                ('status', models.CharField(max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('events', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.event')),
                ('periods', models.ManyToManyField(related_name='p', to='core.period')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NewGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('event', models.CharField(max_length=100)),
                ('eventdate', models.DateField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('sharewith', models.ManyToManyField(related_name='sharewith', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InviteTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('invite_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_by', to=settings.AUTH_USER_MODEL)),
                ('invite_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_to', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teamdetail')),
            ],
        ),
        migrations.CreateModel(
            name='ActiveTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teamdetail')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
